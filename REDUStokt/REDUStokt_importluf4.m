function [dat,sa,time]= REDUStokt_importluf4(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   LISTUSERFILE04F200000T1L0 = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   LISTUSERFILE04F200000T1L0 = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   ListUserFile04F200000T1L0 = importfile('ListUserFile04__F200000_T1_L0.0-0.0_HERR.txt', 2, 1606);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/18 15:56:59

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
%	column50: double (%f)
%   column51: double (%f)
%	column52: double (%f)
%   column53: double (%f)
%	column54: double (%f)
%   column55: double (%f)
%	column56: double (%f)
%   column57: double (%f)
%	column58: double (%f)
%   column59: double (%f)
%	column60: double (%f)
%   column61: double (%f)
%	column62: double (%f)
%   column63: double (%f)
%	column64: double (%f)
%   column65: double (%f)
%	column66: double (%f)
%   column67: double (%f)
%	column68: double (%f)
%   column69: double (%f)
%	column70: double (%f)
%   column71: double (%f)
%	column72: double (%f)
%   column73: double (%f)
%	column74: double (%f)
%   column75: double (%f)
%	column76: double (%f)
%   column77: double (%f)
%	column78: double (%f)
%   column79: double (%f)
%	column80: double (%f)
%   column81: double (%f)
%	column82: double (%f)
%   column83: double (%f)
%	column84: double (%f)
%   column85: double (%f)
%	column86: double (%f)
%   column87: double (%f)
%	column88: double (%f)
%   column89: double (%f)
%	column90: double (%f)
%   column91: double (%f)
%	column92: double (%f)
%   column93: double (%f)
%	column94: double (%f)
%   column95: double (%f)
%	column96: double (%f)
%   column97: double (%f)
%	column98: double (%f)
%   column99: double (%f)
%	column100: double (%f)
%   column101: double (%f)
%	column102: double (%f)
%   column103: double (%f)
%	column104: double (%f)
%   column105: double (%f)
%	column106: double (%f)
%   column107: double (%f)
%	column108: double (%f)
%   column109: double (%f)
%	column110: double (%f)
%   column111: double (%f)
%	column112: double (%f)
%   column113: double (%f)
%	column114: double (%f)
%   column115: double (%f)
%	column116: double (%f)
%   column117: double (%f)
%	column118: double (%f)
%   column119: double (%f)
%	column120: double (%f)
%   column121: double (%f)
%	column122: double (%f)
%   column123: double (%f)
%	column124: double (%f)
%   column125: double (%f)
%	column126: double (%f)
%   column127: double (%f)
%	column128: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
dat = table(dataArray{1:end-1}, 'VariableNames', {'StartDate','StartTime','START_LOG','STOP_LOG','LATITUDE','LONGITUDE','MIN_DEPTH','MAX_DEPTH','FREQUENCY','TRANSC','THRESHOLD','SPECIES','CH_PEL','NO_CH_PEL','Pel_CH_00','Pel_CH_01','Pel_CH_02','Pel_CH_03','Pel_CH_04','Pel_CH_05','Pel_CH_06','Pel_CH_07','Pel_CH_08','Pel_CH_09','Pel_CH_10','Pel_CH_11','Pel_CH_12','Pel_CH_13','Pel_CH_14','Pel_CH_15','Pel_CH_16','Pel_CH_17','Pel_CH_18','Pel_CH_19','Pel_CH_20','Pel_CH_21','Pel_CH_22','Pel_CH_23','Pel_CH_24','Pel_CH_25','Pel_CH_26','Pel_CH_27','Pel_CH_28','Pel_CH_29','Pel_CH_30','Pel_CH_31','Pel_CH_32','Pel_CH_33','Pel_CH_34','Pel_CH_35','Pel_CH_36','Pel_CH_37','Pel_CH_38','Pel_CH_39','Pel_CH_40','Pel_CH_41','Pel_CH_42','Pel_CH_43','Pel_CH_44','Pel_CH_45','Pel_CH_46','Pel_CH_47','Pel_CH_48','Pel_CH_49','Pel_CH_50','Pel_CH_51','Pel_CH_52','Pel_CH_53','Pel_CH_54','Pel_CH_55','Pel_CH_56','Pel_CH_57','Pel_CH_58','Pel_CH_59','Pel_CH_60','Pel_CH_61','Pel_CH_62','Pel_CH_63','Pel_CH_64','Pel_CH_65','Pel_CH_66','Pel_CH_67','Pel_CH_68','Pel_CH_69','Pel_CH_70','Pel_CH_71','Pel_CH_72','Pel_CH_73','Pel_CH_74','Pel_CH_75','Pel_CH_76','Pel_CH_77','Pel_CH_78','Pel_CH_79','Pel_CH_80','Pel_CH_81','Pel_CH_82','Pel_CH_83','Pel_CH_84','Pel_CH_85','Pel_CH_86','Pel_CH_87','Pel_CH_88','Pel_CH_89','Pel_CH_90','Pel_CH_91','Pel_CH_92','Pel_CH_93','Pel_CH_94','Pel_CH_95','Pel_CH_96','Pel_CH_97','Pel_CH_98','Pel_CH_99','Pel_CH_100','CH_BOT','NO_CH_BOT','Bot_CH_00','Bot_CH_01','Bot_CH_02','Bot_CH_03','Bot_CH_04','Bot_CH_05','Bot_CH_06','Bot_CH_07','Bot_CH_08','Bot_CH_09','Bot_CH_10'});

time.date = num2str(dat.StartDate);
time.YYYY = str2num(time.date(:,1:4));
time.MM = str2num(time.date(:,5:6));
time.DD = str2num(time.date(:,7:8));

time.time = repmat('0',[length(dat.StartDate) 8]);
for i=1:size(time.time,1)
    dum = num2str(dat.StartTime(i));
    j=length(dum);
    time.time(i,(9-j):end) = dum;
end
time.hh = str2num(time.time(:,1:2));
time.mm = str2num(time.time(:,3:4));
time.ss = str2num(time.time(:,5:6)) + str2num(time.time(:,7:8))/100;
time.datenum = datenum(time.YYYY,time.MM,time.DD,time.hh,time.mm,time.ss);

%% Create data matrix of the pelagic channels
s(1) = max(dat.NO_CH_PEL)-1;
s(2) = length(dat.NO_CH_PEL);
sa = zeros(s);
for i=1:s(1)
    dum = dat(:,i+15);
    var = dum.Variables;
    sa(i,:)= var;
end
